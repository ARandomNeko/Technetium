"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adapter = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const child_process_1 = require("child_process");
const esbuild = __importStar(require("esbuild"));
const dotenv_1 = require("dotenv");
const fs_1 = require("fs");
const updateDotenv = require('update-dotenv');
function adapter({ artifactPath = 'build', autoDeploy = false, cdkProjectPath = `${__dirname}/deploy/index.js`, stackName = 'sveltekit-adapter-aws-webapp', esbuildOptions = {}, FQDN, LOG_RETENTION_DAYS, MEMORY_SIZE, env = {}, } = {}) {
    /** @type {import('@sveltejs/kit').Adapter} */
    return {
        name: 'adapter-awscdk',
        adapt(builder) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const environment = (0, dotenv_1.config)({ path: (0, path_1.join)(process.cwd(), '.env') });
                (0, fs_extra_1.emptyDirSync)(artifactPath);
                const static_directory = (0, path_1.join)(artifactPath, 'assets');
                if (!(0, fs_extra_1.existsSync)(static_directory)) {
                    (0, fs_extra_1.mkdirSync)(static_directory, { recursive: true });
                }
                const prerendered_directory = (0, path_1.join)(artifactPath, 'prerendered');
                if (!(0, fs_extra_1.existsSync)(prerendered_directory)) {
                    (0, fs_extra_1.mkdirSync)(prerendered_directory, { recursive: true });
                }
                const server_directory = (0, path_1.join)(artifactPath, 'server');
                if (!(0, fs_extra_1.existsSync)(server_directory)) {
                    (0, fs_extra_1.mkdirSync)(server_directory, { recursive: true });
                }
                builder.log.minor('Copying asset files.');
                const clientFiles = yield builder.writeClient(static_directory);
                builder.log.minor('Copying server files.');
                yield builder.writeServer(artifactPath);
                (0, fs_extra_1.copyFileSync)(`${__dirname}/lambda/serverless.js`, `${server_directory}/_index.js`);
                (0, fs_extra_1.copyFileSync)(`${__dirname}/lambda/shims.js`, `${server_directory}/shims.js`);
                builder.log.minor('Building AWS Lambda server function.');
                esbuild.buildSync({
                    entryPoints: [`${server_directory}/_index.js`],
                    outfile: `${server_directory}/index.js`,
                    inject: [(0, path_1.join)(`${server_directory}/shims.js`)],
                    external: ['node:*', ...((_a = esbuildOptions === null || esbuildOptions === void 0 ? void 0 : esbuildOptions.external) !== null && _a !== void 0 ? _a : [])],
                    format: (_b = esbuildOptions === null || esbuildOptions === void 0 ? void 0 : esbuildOptions.format) !== null && _b !== void 0 ? _b : 'cjs',
                    bundle: true,
                    platform: 'node',
                    target: (_c = esbuildOptions === null || esbuildOptions === void 0 ? void 0 : esbuildOptions.target) !== null && _c !== void 0 ? _c : 'node16',
                    treeShaking: true,
                });
                builder.log.minor('Prerendering static pages.');
                const prerenderedFiles = yield builder.writePrerendered(prerendered_directory);
                builder.log.minor('Cleanup project.');
                (0, fs_extra_1.unlinkSync)(`${server_directory}/_index.js`);
                (0, fs_extra_1.unlinkSync)(`${artifactPath}/index.js`);
                builder.log.minor('Exporting routes.');
                const routes = [
                    ...new Set([...clientFiles, ...prerenderedFiles]
                        .map((x) => {
                        const z = (0, path_1.dirname)(x);
                        if (z === '.')
                            return x;
                        if (z.includes('/'))
                            return undefined;
                        return `${z}/*`;
                    })
                        .filter(Boolean)),
                ];
                (0, fs_1.writeFileSync)((0, path_1.join)(artifactPath, 'routes.json'), JSON.stringify(routes));
                builder.log.minor('Deploy using AWS-CDK.');
                autoDeploy &&
                    (0, child_process_1.spawnSync)('npx', [
                        'cdk',
                        'deploy',
                        '--app',
                        cdkProjectPath,
                        '*',
                        '--require-approval',
                        'never',
                        '--outputsFile',
                        (0, path_1.join)(__dirname, 'cdk.out', 'cdk-env-vars.json'),
                    ], {
                        cwd: __dirname,
                        stdio: [process.stdin, process.stdout, process.stderr],
                        env: Object.assign({
                            PROJECT_PATH: (0, path_1.join)(process.cwd(), '.env'),
                            SERVER_PATH: (0, path_1.join)(process.cwd(), server_directory),
                            STATIC_PATH: (0, path_1.join)(process.cwd(), static_directory),
                            PRERENDERED_PATH: (0, path_1.join)(process.cwd(), prerendered_directory),
                            ROUTES: routes,
                            STACKNAME: stackName,
                            FQDN,
                            LOG_RETENTION_DAYS,
                            MEMORY_SIZE,
                        }, process.env, env),
                    });
                try {
                    const rawData = (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, 'cdk.out', 'cdk-env-vars.json')).toString();
                    const data = JSON.parse(rawData);
                    const out = Object.keys(data).reduce((p, n) => (Object.assign(Object.assign({}, p), Object.keys(data[n])
                        .filter((x) => !x.includes('ExportsOutput'))
                        .reduce((p, x) => {
                        p[x.toUpperCase()] = data[n][x];
                        return p;
                    }, {}))), {});
                    updateDotenv(Object.assign(Object.assign({}, environment.parsed), out));
                    (0, fs_extra_1.unlinkSync)((0, path_1.join)(__dirname, 'cdk.out', 'cdk-env-vars.json'));
                }
                catch (_d) { }
                builder.log.minor('AWS-CDK deployment done.');
            });
        },
    };
}
exports.adapter = adapter;
//# sourceMappingURL=data:application/json;base64,